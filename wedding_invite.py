# -*- coding: utf-8 -*-
"""Copy of wedding-invite.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kDlqNvcDNF1GJ3Dy-NkzyZ9pycNXNz2a
"""

# Installing the required libraries for Google Collab
!pip install requests -q

import requests
import time
from google.colab import files
from IPython.display import display, HTML
import os
import json

# Play.ht API Credentials, will be stored seperately not here.
API_URL = "https://api.play.ht/api/v2/cloned-voices/instant"
API_KEY = "b71d318c51054a4da51508270d9f1e3a"
USER_ID = "LCAvjowUV6SO6dplwkW2NzJgC6j1"
VOICE_NAME = "invite"

# Cloudinary Credentials, will be stored seperately not here.
CLOUD_NAME = "ddxj5oej8"
CLOUD_API_KEY = "169243361242178"
CLOUD_API_SECRET = "gbRBrGMHxoaqeD6GKxANRuxOsPQ"
UPLOAD_PRESET = "hackathon_2024"

# D-ID API Credentials, will be stored seperately not here
D_ID_API_URL = "https://api.d-id.com/talks"
#D_ID_AUTHORIZATION = "Basic YzJGeWRtRm5lV0Z3Y21GMFpXVnJRR2R0WVdsc0xtTnZiUTpJREV3cWF4bTdHTGhOcTJMVm5OLXE="
D_ID_AUTHORIZATION = "Basic YzJGeWRtRm5lV0V1Y0hKaGRHVmxhekF5TWpsQVoyMWhhV3d1WTI5dDpHQjhKdE9fMngzNWVrN00xY3VkalM="

# Function to upload the audio file
def upload_audio():
    print("Please upload an audio file:")
    uploaded = files.upload()
    for filename in uploaded.keys():
        print(f"Uploaded audio file: {filename}")
    return uploaded

# Function to upload an image to Cloudinary (server required to host the image to be given as input to the D-ID api)
def upload_image_to_cloudinary(image_path):
    url = f"https://api.cloudinary.com/v1_1/{CLOUD_NAME}/image/upload"
    with open(image_path, "rb") as file:
        payload = {
            "upload_preset": UPLOAD_PRESET,
        }
        files_data = {
            "file": file,
        }
        auth = (CLOUD_API_KEY, CLOUD_API_SECRET)
        response = requests.post(url, auth=auth, data=payload, files=files_data)
        if response.status_code == 200:
            data = response.json()
            return data["secure_url"], data["format"]
        else:
            raise Exception(f"Error: {response.status_code}, {response.text}")

# Sending the file to Play.ht API to generate the voice ID
def get_voice_id_from_audio(audio_path):
    files = {'sample_file': (os.path.basename(audio_path), open(audio_path, 'rb'), 'audio/mpeg')}
    payload = {'voice_name': VOICE_NAME}
    headers = {
        "accept": "application/json",
        "AUTHORIZATION": API_KEY,
        "X-USER-ID": USER_ID
    }

    response = requests.post(API_URL, data=payload, files=files, headers=headers)

    if response.status_code == 201:
        result = response.json()
        voice_id = result.get("id")
        if voice_id:
            print(f"Voice ID: {voice_id}")
            return voice_id
        else:
            print("Error: No voice ID returned by the API")
            return None
    else:
        print(f"API request failed with status code {response.status_code}")
        return None

# Using the voice ID to generate Speech from Text
def generate_speech(voice_id, text_to_speak):
    url = "https://api.play.ht/api/v2/tts"
    payload = {
        "voice": voice_id,
        "output_format": "mp3",
        "voice_engine": "PlayHT2.0",
        "text": text_to_speak,
        "speed": 0.9,
    }
    headers = {
        "accept": "text/event-stream",
        "content-type": "application/json",
        "AUTHORIZATION": API_KEY,
        "X-USER-ID": USER_ID
    }

    response = requests.post(url, json=payload, headers=headers, stream=True)

    if response.status_code == 200:
        print(f"TTS request sent for text: '{text_to_speak}'. Waiting for completion...")

        for line in response.iter_lines():
            if line:
                decoded_line = line.decode('utf-8')
                if "data" in decoded_line:
                    data = decoded_line.split("data:")[1].strip()
                    try:
                        result = eval(data)
                        audio_url = result.get("url")
                        if audio_url:
                            print(f"Audio URL: {audio_url}")
                            return audio_url
                    except Exception as e:
                        print(f"Error parsing event data: {e}")
    else:
        print(f"Failed to generate speech for text '{text_to_speak}'. Status Code: {response.status_code}")
        return None

# Generating videos using D-ID API
def generate_video(image_url, audio_url):
    payload = {
        "source_url": image_url,
        "script": {
            "type": "audio",
            "input": "This will be replaced dynamically",
            "audio_url": audio_url,
            "reduce_noise": True
        },
        "config": {
            "fluent": "false",
            "pad_audio": "0.0"
        }
    }
    headers = {
        "accept": "application/json",
        "content-type": "application/json",
        "authorization": D_ID_AUTHORIZATION
    }

    response = requests.post(D_ID_API_URL, json=payload, headers=headers)
    if response.status_code == 201:
        result = response.json()
        video_id = result.get("id")
        print(f"Video ID: {video_id}")
        return video_id
    else:
        print(f"Failed to generate video. Status Code: {response.status_code}")
        return None

# Checking the video status and extracting the result URL from the response
def get_video_status(video_id):
    url = f"https://api.d-id.com/talks/{video_id}"
    headers = {
        "accept": "application/json",
        "authorization": D_ID_AUTHORIZATION
    }

    while True:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            result = response.json()
            if result["status"] == "done":
                video_url = result.get("result_url")
                print(f"Video URL: {video_url}")
                return video_url
            elif result["status"] == "failed":
                print("Video generation failed.")
                return None
            else:
                print("Video still processing... Retrying in 5 seconds.")
                time.sleep(5)
        else:
            print(f"Failed to fetch video status. Status Code: {response.status_code}")
            return None

# Playing and downloading the video in Google Collab
def play_and_download_video(video_url):
    display(HTML(f'<video controls src="{video_url}" width="512"></video>'))
    display(HTML(f'<a href="{video_url}" download="generated_video.mp4">Download Video</a>'))

def invokeJson2video(video_url, groom_image_url, bride_image_url,audio_url):
    url = "https://api.json2video.com/v2/movies"
    payload = json.dumps({
      "id": "qzk6j763",
      "comment": "sample",
      "resolution": "full-hd",
      "quality": "high",
      "scenes": [
        {
          "id": "q2yql6ok",
          "comment": "New scene",
          "elements": [
            {
              "id": "qyx3d9zf",
              "type": "image",
              "src": "https://images.pexels.com/photos/414660/pexels-photo-414660.jpeg",
              "width": None,
              "height": None,
              "x": 0,
              "y": 0
            },
            {
              "id": "qe4sqzwm",
              "type": "video",
              "src": "{{video}}",
              "width": 300,
              "height": 250,
              "x": 0,
              "y": 0,
              "position": "bottom-right"
            },
            # {
            #   "id": "qyx1heu1",
            #   "type": "audio",
            #   "src": "{{audio}}"
            # },
            {
              "id": "qwyhjf6k",
              "type": "image",
              "src": "https://assets.json2video.com/clients/ax7kvl690m/uploads/Screenshot_from_2024-11-20_13-53-58-removebg-preview.png",
              "position": "bottom-left",
              "y": 0,
              "x": 0,
              "rotate": {
                "angle": -2
                }
              }
          ]
        }
      ],
      "elements": [
        {
          "id": "q028qs34",
          "type": "component",
          "component": "shape/rectangle",
          "settings": {
            "rectangle1": {
              "left": "-30%",
              "top": "10%",
              "width": "30vw",
              "height": "30vw",
              "animate": {
                "duration": "1500",
                "easing": "easeOutCubic",
                "left": "15%"
              },
              "background-size": "cover",
              "background-image": "url('{{hero1}}')",
              "background-position": "center",
              "border-width": "1vw",
              "border-style": "solid",
              "border-color": "white",
              "border-radius": "0.5vw"
            },
            "rectangle2": {
              "left": "100%",
              "top": "10%",
              "width": "30vw",
              "height": "30vw",
              "animate": {
                "duration": "1500",
                "easing": "easeOutCubic",
                "left": "55%"
              },
              "background-size": "cover",
              "background-image": "url('{{hero2}}')",
              "background-position": "center",
              "border-width": "1vw",
              "border-style": "solid",
              "border-color": "white",
              "border-radius": "0.5vw"
            }
          },
          "comment": "Two images moving horizontally"
        }
      ],
      "variables": {
        "text": "text",
        "audio": audio_url,
        "video": video_url,
        "bgImage": "bgImage",
        "hero1": groom_image_url,
        "hero2": bride_image_url
      },
      "width": 1920,
      "height": 720
    })
    headers = {
      'x-api-key': 'VH0fonUPnt19ziFSBW7TS83a8EItkaeAefSgezn8',
      'Content-Type': 'application/json'
    }
    response = requests.request("POST", url, headers=headers, data=payload)
    print(response.text)

def main():
    # Uploading the audio file
    uploaded_audio = upload_audio()
    audio_filename = list(uploaded_audio.keys())[0]

    # Uploading the image file
    print("Please upload invitees image:")
    uploaded_image = files.upload()
    image_filename = list(uploaded_image.keys())[0]

    print("Please upload Groom's image:")
    groom_image = files.upload()
    groom_image_filename = list(groom_image.keys())[0]

    print("Please upload Bride's image:")
    bride_image = files.upload()
    bride_image_filename = list(bride_image.keys())[0]



    try:
        # Uploading the image to Cloudinary (any server would work here)
        image_url, _ = upload_image_to_cloudinary(image_filename)
        groom_image_url, _ = upload_image_to_cloudinary(groom_image_filename)
        bride_image_url, _ = upload_image_to_cloudinary(bride_image_filename)

        print(f"Image successfully uploaded to Cloudinary! URL: {image_url}, {groom_image_url}, {bride_image_url}")

    except Exception as e:
        print(f"Image upload failed: {e}")
        return

    # Getting the voice ID from the uploaded audio file
    voice_id = get_voice_id_from_audio(audio_filename)

    if voice_id:
        # Getting the user input for names
        names_input = input("Enter a comma-separated list of names (e.g.,Aman,Suresh):")
        names = [name.strip() for name in names_input.split(',')]
        partner_name = input("Enter your Partner's name: ");
        date_input = input("Enter the date: ")
        venue_input = input("Enter the venue: ")


        # Generating speech and video for each name
        for name in names:
            # text_to_speak = f"Hello  {name}, I am super excited to invite you to Sheena and my wedding on {date_input} at {venue_input}. It would mean a lot to have you with us on this special day!"
            text_to_speak = f"Hello {name}, I am happy to invite you to {partner_name} and  my wedding on {date_input}.  Please grace us with your presence at {venue_input}. Thanks"
            audio_url = generate_speech(voice_id, text_to_speak)
            #audio_url = "https://assets.json2video.com/clients/ax7kvl690m/uploads/audio1.wav"


            if audio_url:
                video_id = generate_video(image_url, audio_url)
                if video_id:
                    video_url = get_video_status(video_id)
                    if video_url:
                        play_and_download_video(video_url)
                        invokeJson2video(video_url,groom_image_url, bride_image_url,audio_url)

main()

def getFinalWeddingVideo (id):
    url = "https://api.json2video.com/v2/movies"
    payload = json.dumps({
      "id": "qzk6j763",
      "comment": "sample",
      "resolution": "hd",
      "quality": "high",
      "scenes": [
        {
          "id": "q2yql6ok",
          "comment": "New scene",
          "elements": [
            {
              "id": "qyx3d9zf",
              "type": "image",
              "src": "https://images.pexels.com/photos/414660/pexels-photo-414660.jpeg",
              "width": None,
              "height": None,
              "x": 0,
              "y": 0
            },
            {
              "id": "qe4sqzwm",
              "type": "video",
              "src": "https://assets.json2video.com/clients/ax7kvl690m/uploads/Gen-3 Alpha Turbo 96804702, Camcorder  A charac, Cropped - WhatsApp I, M 5.mp4",
              "width": 300,
              "height": 250,
              "x": 0,
              "y": 0,
              "position": "bottom-right"
            },
            {
              "id": "qyx1heu1",
              "type": "audio",
              "src": "https://peregrine-results.s3.amazonaws.com/pigeon/MvZ6AqvyMBb2US5vkz_0.mp3  "
            },
            {
              "id": "q9p3gj3r",
              "type": "subtitles",
              "comment": "subtitles"
            }
          ]
        }
      ],
      "elements": [
        {
          "id": "q028qs34",
          "type": "component",
          "component": "shape/rectangle",
          "settings": {
            "rectangle1": {
              "left": "-30%",
              "top": "10%",
              "width": "30vw",
              "height": "30vw",
              "animate": {
                "duration": "1500",
                "easing": "easeOutCubic",
                "left": "15%"
              },
              "background-size": "cover",
              "background-image": "url('https://imagecdn.jeevansathi.com/41867/3/837343561-1695302167769.jpeg')",
              "background-position": "center",
              "border-width": "1vw",
              "border-style": "solid",
              "border-color": "white",
              "border-radius": "0.5vw"
            },
            "rectangle2": {
              "left": "100%",
              "top": "10%",
              "width": "30vw",
              "height": "30vw",
              "animate": {
                "duration": "1500",
                "easing": "easeOutCubic",
                "left": "55%"
              },
              "background-size": "cover",
              "background-image": "url('https://imagecdn.jeevansathi.com/52587/5/1051745059-1721341823811.jpeg')",
              "background-position": "center",
              "border-width": "1vw",
              "border-style": "solid",
              "border-color": "white",
              "border-radius": "0.5vw"
            }
          },
          "comment": "Two images moving horizontally"
        }
      ],
      "variables": {
        "text": "text",
        "audio": "voice",
        "video": "video",
        "bgImage": "bgImage",
        "hero1": "image",
        "hero2": "image"
      },
      "width": 1280,
      "height": 720
    })
    headers = {
      'x-api-key': 'VH0fonUPnt19ziFSBW7TS83a8EItkaeAefSgezn8',
      'Content-Type': 'application/json'
    }

    response = requests.request("GET", url, headers=headers, data=payload)

    while True:
        response = requests.request("GET", url, headers=headers, data=payload)
        if response.status_code == 200:
            result = response.json()
            movies = result.get("movies")
            # print(f"Movies: {movies}")
            movie_object = movies[0];
            # print(f"Movie Object: {movie_object}")
            if(movie_object["status"] == "done"):
              print("Success Generation : ", movie_object.get("url"));
              return False
            else:
                print("Video still processing... Retrying in 5 seconds.")
                time.sleep(5)
        else:
            print(f"Failed to fetch video status. Status Code: {response.status_code}")
            return None
    # if response.status_code == 200:
    #     result = response.json()
    #     movies = result.get("movies")
    #     print(f"Movies: {movies}")
    #     movie_object = movies[0];
    #     if(movie_object.get("project") == id)

    #     return movie_ob
    # else:
    #     print(f"Failed to generate video. Status Code: {response.status_code}")
    #     return None

getFinalWeddingVideo(1234)

